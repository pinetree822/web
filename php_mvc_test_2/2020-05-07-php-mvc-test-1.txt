===================================================
PHP Autoload 와 Namespace 구조 설계
===================================================
HomePage 구조
\
|   .htaccess
|   index.php
|
\---application
    +---vender
    |       autoload.php
    +---libs
    |       application.php
    |       config.php
    +---controllers
    |       BoardController.php
    |       Controller.php
    |       HomeController.php
    |
    |
    +---models
    |       BoardModel.php
    |       HomeModel.php
    |       Model.php
    |
    |
    \---views
        \---board
                delete.php
                deleteNoFile.php
                edit.php
                index.php
                read.php
                readNoFile.php
                update.php
                updateNoFile.php
                write.php



===================================================
MVC 모델은 URL 분석 -> 요청사항 분석 (URL 구성 규칙 필요)
URL 규칙은 설정하기 나름
===================================================
출처: https://freehoon.tistory.com/68?category=708152 [훈잇 블로그]


URL 구성 규칙
http://localhost:8080/메뉴/action/category/idx/pageNo/searchKey


URL구성 구분 / URL구성 설명

 idx / 상단 메뉴에 대응하는 값

 action / 목록, 게시글보기, 쓰기, 수정하기, 삭제하기 등의 기능에 대응하는 값

 category / 메뉴 하위에 다른 메뉴가 있을 경우 대응하는 용도로 사용될 값

 idx / 글 번호에 대응하는 값

 pageNo / 글을 읽고 다시 목록으로 돌아 가거나, 수정, 삭제 후 목록으로 돌아 갔을때 처음으로 돌아가지 않기 위해 현재 위치(페이지)를 저장하기 위한 값

 searchKey / 조건 검색 후 페이지 이동, 글을 읽은 후 검색된 목록으로 이동 등과 같이 검색한 결과를 유지하기 위해 검색 했던 조건을 저장할 용도로 사용할 값






===================================================
mysql 테이블 생성 - 게시판용 테이블 만들기
===================================================
// 등록날짜와 수정날짜 변경한 query
Create Table `board` (
    `idx` int(11) NOT NULL,
    `title` varchar(200) NOT NULL,
    `content` text NOT NULL,
    `category` varchar(20) NOT NULL DEFAULT '''''',
    `reg_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `edit_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `comment_cnt` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


ALTER TABLE `board` ADD PRIMARY KEY (`idx`);
ALTER TABLE `board` MODIFY `idx` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;
COMMIT;




- board 테이블에 증가하는 idx 열을 추가한다.
ALTER TABLE `board` ADD PRIMARY KEY (`idx`);

- board 테이블의 idx열을 정수로 하며 NULL 허용하지 않고 자동증가값으로 하되
증가값이 시작하는 값이 4부터 시작한다.
ALTER TABLE `board` MODIFY `idx` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;


===================================================
.htaccess 파일 만들기
===================================================

이전 개념잡기 포스팅에서 말씀 드렸던 것처럼 MVC모델은 모든 요구사항을 한 곳으로 모일 수 있게 해야 합니다.

따라서 .htaccess 파일을 만들어 모든 내용을 index.php 로 들어 올 수 있게끔 만들어 주어야 합니다.

/.htaccess
Options -MultiViews
RewriteEngine On
Options -Indexes
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-l
RewriteRule ^(.+)$ index.php?url=$1 [QSA,L]

가장 중요한 내용은 가장 아랫줄 입니다.
localhost:8080/home/index/board/

라는 URL은
index.php?url=home/index/board
와 같은 형식으로 넘겨지게 됩니다.

따라서 index.php는  GET방식으로 url 이라는 파라미터에 받게 되며
url 파라미터에는 home/index/board 라는 값을 가지고 있습니다.
출처: https://freehoon.tistory.com/69?category=708152 [훈잇 블로그]
===================================================
web > 파일구조
===================================================
\
|   .htaccess
|   index.php
|
\---application
    +---vender
    |       autoload.php
    +---libs
    |       application.php
    |       config.php
    +---controllers
    |       BoardController.php
    |       Controller.php
    |       HomeController.php
    |
    |
    +---models
    |       BoardModel.php
    |       HomeModel.php
    |       Model.php
    |
    |
    \---views
        \---board
                delete.php
                deleteNoFile.php
                edit.php
                index.php
                read.php
                readNoFile.php
                update.php
                updateNoFile.php
                write.php



===================================================
pdo(PHP Data Objects) 관련 참고
https://www.php.net/manual/en/class.pdostatement.php
===================================================

PDOException extends RuntimeException {
/* Properties */
public array $errorInfo ;
protected string $code ;
/* Inherited properties */
protected string $message ;
protected int $code ;
protected string $file ;
protected int $line ;
/* Inherited methods */
final public Exception::getMessage ( void ) : string
final public Exception::getPrevious ( void ) : Throwable
final public Exception::getCode ( void ) : mixed
final public Exception::getFile ( void ) : string
final public Exception::getLine ( void ) : int
final public Exception::getTrace ( void ) : array
final public Exception::getTraceAsString ( void ) : string
public Exception::__toString ( void ) : string
final private Exception::__clone ( void ) : void
}



Errors and error handling
PDO::ERRMODE_SILENT
PDO::ERRMODE_WARNING
PDO::ERRMODE_EXCEPTION




The PDO class
PDO :: beginTransaction — 트랜잭션을 시작합니다
PDO :: commit — 트랜잭션을 커밋
PDO :: __ construct — 데이터베이스에 대한 연결을 나타내는 PDO 인스턴스를 만듭니다.
PDO :: errorCode — 데이터베이스 핸들의 마지막 작업과 관련된 SQLSTATE를 가져옵니다.
PDO :: errorInfo — 데이터베이스 핸들의 마지막 작업과 관련된 확장 된 오류 정보를 가져옵니다.
PDO :: exec — SQL 문을 실행하고 영향을받는 행 수를 반환
PDO :: getAttribute — 데이터베이스 연결 속성을 검색
PDO :: getAvailableDrivers — 사용 가능한 PDO 드라이버 배열을 반환
PDO :: inTransaction — 트랜잭션 내부에 있는지 확인
PDO :: lastInsertId — 마지막으로 삽입 된 행 또는 시퀀스 값의 ID를 반환합니다
PDO :: prepare — 실행할 문장을 준비하고 문장 객체를 반환
PDO :: query — SQL 문을 실행하고 결과 세트를 PDOStatement 객체로 반환
PDO :: quote — 쿼리에 사용할 문자열을 인용합니다
PDO :: rollBack — 트랜잭션 롤백
PDO :: setAttribute — 속성 설정



The PDOStatement class
PDOStatement :: bindColumn — 열을 PHP 변수에 바인딩
PDOStatement :: bindParam — 매개 변수를 지정된 변수 이름에 바인딩
PDOStatement :: bindValue — 값을 매개 변수에 바인딩
PDOStatement :: closeCursor — 커서를 닫고 명령문을 다시 실행할 수있게합니다.
PDOStatement :: columnCount — 결과 집합의 열 수를 반환합니다
PDOStatement :: debugDumpParams — SQL 준비 명령 덤프
PDOStatement :: errorCode — 명령문 핸들의 마지막 조작과 연관된 SQLSTATE를 가져옵니다.
PDOStatement :: errorInfo — 명령문 핸들의 마지막 조작과 연관된 확장 오류 정보를 가져옵니다.
PDOStatement :: execute- 준비된 문장을 실행
PDOStatement :: fetch — 결과 집합에서 다음 행을 가져옵니다.
PDOStatement :: fetchAll — 모든 결과 집합 행을 포함하는 배열을 반환
PDOStatement :: fetchColumn — 결과 집합의 다음 행에서 단일 열을 반환합니다.
PDOStatement :: fetchObject — 다음 행을 가져 와서 객체로 반환
PDOStatement :: getAttribute — 문장 속성을 얻어 온다
PDOStatement :: getColumnMeta — 결과 집합의 열에 대한 메타 데이터를 반환
PDOStatement :: nextRowset — 다중 행 집합 명령문 핸들에서 다음 행 집합으로 진행
PDOStatement :: rowCount — 마지막 SQL 문의 영향을받는 행 수를 반환합니다.
PDOStatement :: setAttribute — 명령문 속성을 설정한다
PDOStatement :: setFetchMode —이 문장에 대한 기본 페치 모드를 설정



Prepared statements and stored procedures
https://www.php.net/manual/en/pdo.prepared-statements.php


Transactions and auto-commit
https://www.php.net/manual/en/pdo.transactions.php


Connections and Connection management
https://www.php.net/manual/en/pdo.connections.php


Predefined Constants
https://www.php.net/manual/en/pdo.constants.php


미리 정의 된 상수
https://www.php.net/manual/en/pdo.constants.php
아래 상수는이 확장으로 정의되며 확장이 PHP로 컴파일되거나 런타임에 동적으로로드 된 경우에만 사용할 수 있습니다.

경고
PDO는 PHP 5.1부터 클래스 상수를 사용합니다. 이전 릴리스는 전역 상수를 형식으로 사용 PDO_PARAM_BOOL합니다.

PDO::PARAM_BOOL ( 정수 )
부울 데이터 형식을 나타냅니다.
PDO::PARAM_NULL ( 정수 )
SQL NULL 데이터 유형을 나타냅니다.
PDO::PARAM_INT ( 정수 )
SQL INTEGER 데이터 유형을 나타냅니다.
PDO::PARAM_STR ( 정수 )
SQL CHAR, VARCHAR 또는 기타 문자열 데이터 유형을 나타냅니다.
PDO::PARAM_STR_NATL ( 정수 )
문자열을 나타내는 플래그는 자국 문자 세트를 사용합니다. PHP 7.2.0부터 사용 가능
PDO::PARAM_STR_CHAR ( 정수 )
문자열을 나타내는 플래그는 일반 문자 세트를 사용합니다. PHP 7.2.0부터 사용 가능
PDO::PARAM_LOB ( 정수 )
SQL 대형 객체 데이터 유형을 나타냅니다.
PDO::PARAM_STMT ( 정수 )
레코드 세트 유형을 나타냅니다. 현재 모든 드라이버에서 지원하지 않습니다.
PDO::PARAM_INPUT_OUTPUT ( 정수 )
매개 변수가 스토어드 프로 시저에 대한 INOUT 매개 변수임을 지정합니다. 명시 적 PDO :: PARAM_ * 데이터 유형을 사용하여이 값을 비트 단위 또는 OR해야합니다.
PDO::FETCH_LAZY ( 정수 )
페치 메소드가 결과 세트에 리턴 된 컬럼 이름에 해당하는 변수 이름을 가진 오브젝트로 각 행을 리턴하도록 지정합니다. PDO::FETCH_LAZY액세스 할 때 오브젝트 변수 이름을 작성합니다. PDOStatement :: fetchAll () 내 에서는 유효하지 않습니다 .
PDO::FETCH_ASSOC ( 정수 )
페치 메소드가 해당 결과 세트에 리턴 된대로 열 이름으로 색인화 된 배열로 각 행을 리턴하도록 지정합니다. 결과 집합에 이름이 같은 여러 열이 포함 된 경우 PDO::FETCH_ASSOC열 이름 당 하나의 값만 반환합니다.
PDO::FETCH_NAMED ( 정수 )
페치 메소드가 해당 결과 세트에 리턴 된대로 열 이름으로 색인화 된 배열로 각 행을 리턴하도록 지정합니다. 결과 집합에 이름이 같은 여러 열이 포함 된 경우 PDO::FETCH_NAMED열 이름 당 값 배열을 반환합니다.
PDO::FETCH_NUM ( 정수 )
페치 메소드가 열 0부터 시작하여 해당 결과 세트에 리턴 된 열 번호로 색인화 된 배열로 각 행을 리턴하도록 지정합니다.
PDO::FETCH_BOTH ( 정수 )
페치 메소드가 열 0부터 시작하여 해당 결과 세트에 리턴 된 열 이름과 숫자로 인덱스 된 배열로 각 행을 리턴하도록 지정합니다.
PDO::FETCH_OBJ ( 정수 )
페치 메소드가 결과 세트에 리턴 된 컬럼 이름에 해당하는 특성 이름을 가진 오브젝트로 각 행을 리턴하도록 지정합니다.
PDO::FETCH_BOUND ( 정수 )
페치 메소드가 TRUE를 리턴하고 결과 세트의 컬럼 값을 PDOStatement :: bindParam () 또는 PDOStatement :: bindColumn () 메소드 와 바인드 된 PHP 변수에 지정하도록 지정합니다 .
PDO::FETCH_COLUMN ( 정수 )
페치 메소드가 결과 세트의 다음 행에서 요청 된 단일 컬럼 만 리턴하도록 지정합니다.
PDO::FETCH_CLASS ( 정수 )
페치 메소드가 요청 된 클래스의 새 인스턴스를 리턴하고 열을 클래스의 이름 지정된 특성에 맵핑하도록 지정합니다.
참고 : 요청 된 클래스에 속성이 없으면 magic __set () 메서드가 호출됩니다.

PDO::FETCH_INTO ( 정수 )
페치 메소드가 요청 된 클래스의 기존 인스턴스를 업데이트하고 열을 클래스의 이름 지정된 특성에 맵핑하도록 지정합니다.
PDO::FETCH_FUNC ( 정수 )
데이터가 즉시 처리되는 방식을 완전히 사용자 정의 할 수 있습니다 ( PDOStatement :: fetchAll () 내에서만 유효 ).
PDO::FETCH_GROUP ( 정수 )
값으로 그룹을 반환합니다. 일반적으로 결합 PDO::FETCH_COLUMN또는 PDO::FETCH_KEY_PAIR.
PDO::FETCH_UNIQUE ( 정수 )
고유 한 값만 가져옵니다.
PDO::FETCH_KEY_PAIR ( 정수 )
첫 번째 열이 키이고 두 번째 열이 값인 배열로 2 열 결과를 가져옵니다. PHP 5.2.3부터 사용 가능합니다.
PDO::FETCH_CLASSTYPE ( 정수 )
첫 번째 열의 값에서 클래스 이름을 결정하십시오.
PDO::FETCH_SERIALIZE ( 정수 )
로 PDO::FETCH_INTO하지만, 객체 직렬화 된 문자열로 제공됩니다. PHP 5.1.0부터 사용 가능합니다. PHP 5.3.0부터이 플래그가 설정되면 클래스 생성자가 호출되지 않습니다.
PDO::FETCH_PROPS_LATE ( 정수 )
속성을 설정하기 전에 생성자를 호출하십시오. PHP 5.2.0부터 사용 가능합니다.
PDO::ATTR_AUTOCOMMIT ( 정수 )
이 값이 인 FALSE경우 PDO는 자동 커밋을 비활성화하여 연결이 트랜잭션을 시작하도록 시도합니다.
PDO::ATTR_PREFETCH ( 정수 )
프리 페치 크기를 설정하면 애플리케이션의 메모리 사용량과 속도의 균형을 맞출 수 있습니다. 모든 데이터베이스 / 드라이버 조합이 프리 페치 크기 설정을 지원하지는 않습니다. 프리 페치 크기가 클수록 메모리 사용량이 높아지면서 성능이 향상됩니다.
PDO::ATTR_TIMEOUT ( 정수 )
데이터베이스와의 통신에 대한 시간 초과 값을 초 단위로 설정합니다.
PDO::ATTR_ERRMODE ( 정수 )
이 속성에 대한 자세한 정보 는 오류 및 오류 처리 섹션을 참조하십시오.
PDO::ATTR_SERVER_VERSION ( 정수 )
이것은 읽기 전용 속성입니다. PDO가 연결된 데이터베이스 서버 버전에 대한 정보를 리턴합니다.
PDO::ATTR_CLIENT_VERSION ( 정수 )
이것은 읽기 전용 속성입니다. PDO 드라이버가 사용중인 클라이언트 라이브러리 버전에 대한 정보를 리턴합니다.
PDO::ATTR_SERVER_INFO ( 정수 )
이것은 읽기 전용 속성입니다. PDO가 연결된 데이터베이스 서버에 대한 일부 메타 정보를 리턴합니다.
PDO::ATTR_CONNECTION_STATUS ( 정수 )
PDO::ATTR_CASE ( 정수 )
PDO :: CASE_ * 상수로 지정된 특정 케이스로 컬럼 이름을 강제 실행하십시오 .
PDO::ATTR_CURSOR_NAME ( 정수 )
커서에 사용할 이름을 가져 오거나 설정하십시오. 스크롤 가능한 커서 및 위치 지정된 업데이트를 사용할 때 가장 유용합니다.
PDO::ATTR_CURSOR ( 정수 )
커서 유형을 선택하십시오. PDO는 현재 중 하나를 지원 PDO::CURSOR_FWDONLY하고 PDO::CURSOR_SCROLL. 와 스틱 PDO::CURSOR_FWDONLY당신이 화면 이동 커서이 필요하다는 것을 알지 못한다면.
PDO::ATTR_DRIVER_NAME ( 문자열 )
드라이버 이름을 반환합니다.
사용하는 예제 # 1 PDO::ATTR_DRIVER_NAME

<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Running on mysql; doing something mysql specific here\n";
}
?>
PDO::ATTR_ORACLE_NULLS ( 정수 )
데이터 페치에서 빈 문자열을 SQL NULL 값으로 변환하십시오.
PDO::ATTR_PERSISTENT ( 정수 )
새 연결을 만드는 대신 지속적인 연결을 요청하십시오. 참조 연결 및 연결 관리 이 속성에 대한 자세한 내용입니다.
PDO::ATTR_STATEMENT_CLASS ( 정수 )
명령문이 리턴되는 클래스 이름을 설정합니다.
PDO::ATTR_FETCH_CATALOG_NAMES ( 정수 )
결과 세트에 리턴 된 각 열 이름 앞에 포함 카탈로그 이름을 추가하십시오. 카탈로그 이름과 열 이름은 10 진수 (.) 문자로 구분됩니다. 이 속성의 지원은 드라이버 수준입니다. 드라이버가 지원하지 않을 수 있습니다.
PDO::ATTR_FETCH_TABLE_NAMES ( 정수 )
결과 세트에 리턴 된 각 열 이름 앞에 포함 테이블 이름을 추가하십시오. 테이블 이름과 열 이름은 10 진수 (.) 문자로 구분됩니다. 이 속성의 지원은 드라이버 수준입니다. 드라이버가 지원하지 않을 수 있습니다.
PDO::ATTR_STRINGIFY_FETCHES ( 정수 )
페치 된 모든 값을 문자열로 처리합니다.
PDO::ATTR_MAX_COLUMN_LEN ( 정수 )
최대 열 이름 길이를 설정합니다.
PDO::ATTR_DEFAULT_FETCH_MODE ( 정수 )
PHP 5.2.0부터 사용 가능
PDO::ATTR_EMULATE_PREPARES ( 정수 )
PHP 5.1.3부터 ​​사용 가능합니다.
PDO::ATTR_DEFAULT_STR_PARAM ( 정수 )
기본 문자열 매개 변수 유형을 설정합니다 . 이는 PDO::PARAM_STR_NATL and 중 하나 일 수 있습니다 PDO::PARAM_STR_CHAR. PHP 7.2.0부터 사용 가능합니다.
PDO::ERRMODE_SILENT ( 정수 )
오류가 발생하면 오류나 예외를 발생시키지 마십시오. 개발자는 명시 적으로 오류를 확인해야합니다. 이것이 기본 모드입니다. 참조 오류 및 오류 처리를 이 속성에 대한 자세한 내용은.
PDO::ERRMODE_WARNING ( 정수 )
E_WARNING오류가 발생하면 PHP 메시지를 발행하십시오 . 참조 오류 및 오류 처리를 이 속성에 대한 자세한 내용은.
PDO::ERRMODE_EXCEPTION ( 정수 )
오류가 발생 하면 PDOException을 발생시킵니다. 참조 오류 및 오류 처리를 이 속성에 대한 자세한 내용은.
PDO::CASE_NATURAL ( 정수 )
데이터베이스 드라이버가 리턴 한대로 열 이름을 그대로 두십시오.
PDO::CASE_LOWER ( 정수 )
열 이름을 소문자로 강제합니다.
PDO::CASE_UPPER ( 정수 )
열 이름을 대문자로 바꿉니다.
PDO::NULL_NATURAL ( 정수 )
PDO::NULL_EMPTY_STRING ( 정수 )
PDO::NULL_TO_STRING ( 정수 )
PDO::FETCH_ORI_NEXT ( 정수 )
결과 집합에서 다음 행을 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::FETCH_ORI_PRIOR ( 정수 )
결과 집합에서 이전 행을 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::FETCH_ORI_FIRST ( 정수 )
결과 집합에서 첫 번째 행을 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::FETCH_ORI_LAST ( 정수 )
결과 집합에서 마지막 행을 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::FETCH_ORI_ABS ( 정수 )
요청 된 행을 결과 세트에서 행 번호별로 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::FETCH_ORI_REL ( 정수 )
결과 세트에서 커서의 현재 위치에서 상대 위치별로 요청 된 행을 가져옵니다. 스크롤 가능한 커서에만 유효합니다.
PDO::CURSOR_FWDONLY ( 정수 )
정방향 전용 커서 로 PDOStatement 오브젝트를 작성하십시오 . PHP에서 가장 빠르고 가장 일반적인 데이터 액세스 패턴이므로 이것이 기본 커서 선택입니다.
PDO::CURSOR_SCROLL ( 정수 )
스크롤 가능한 커서 로 PDOStatement 객체를 만듭니다 . 패스 PDO를 FETCH_ORI_ :: *이 정수 행의 결과 세트로부터 페치 제어한다.
PDO::ERR_NONE ( 문자열 )
SQLSTATE '00000'에 해당합니다. 이는 SQL 문이 오류나 경고없이 성공적으로 발행되었음을 의미합니다. 이 상수는 PDO :: errorCode () 또는 PDOStatement :: errorCode () 를 점검하여 오류가 발생했는지 판별 할 때 편리합니다. 어쨌든 오류 조건을 발생시킨 메소드의 리턴 코드를 검사하여 이것이 사실인지 알 수 있습니다.
PDO::PARAM_EVT_ALLOC ( 정수 )
할당 이벤트
PDO::PARAM_EVT_FREE ( 정수 )
할당 해제 이벤트
PDO::PARAM_EVT_EXEC_PRE ( 정수 )
준비된 명령문을 실행하기 전에 이벤트가 트리거되었습니다.
PDO::PARAM_EVT_EXEC_POST ( 정수 )
준비된 명령문을 실행 한 후 이벤트가 트리거되었습니다.
PDO::PARAM_EVT_FETCH_PRE ( 정수 )
결과 집합에서 결과를 가져 오기 전에 이벤트가 트리거되었습니다.
PDO::PARAM_EVT_FETCH_POST ( 정수 )
결과 집합에서 결과를 가져온 후 이벤트가 트리거되었습니다.
PDO::PARAM_EVT_NORMALIZE ( 정수 )
바인딩 된 매개 변수 등록 중에 이벤트가 트리거되어 드라이버가 매개 변수 이름을 정규화 할 수 있습니다.
PDO::SQLITE_DETERMINISTIC ( 정수 )
PDO::sqliteCreateFunction ()으로 작성된 함수 가 결정적 임을 지정합니다. 즉, 단일 SQL 문 내에서 동일한 입력이 주어지면 항상 동일한 결과를 리턴합니다. (PHP 7.1.4부터 사용 가능)






===================================================
pdo(PHP Data Objects) 관련 참고
https://opentutorials.org/module/6/5155
===================================================
php의 디렉토리가 D:\BitNami\wampstack-5.4.21-0\php일 경우 D:\BitNami\wampstack-5.4.21-0\php\php.ini 파일을 열고 아래의 코드 앞의 ;을 제거한다.

extension=pdo_mysql.dll

익스텐션의 dll 파일이 설치된 디렉토리의 기본경로를 변경해준다. 아래의 경로는 필자가 설치한 Bitnami를 기준으로 한 것이기 때문에 사용자마다 다를 수 있다. 자신의 환경에 맞게 수정해준다.

extension_dir = "D:\_xampp\php\ext"


===================================================
mysql-pdo 예제 1
https://www.php.net/manual/en/class.pdostatement.php
===================================================
$sql = 'SELECT name, colour, calories FROM fruit';
try {
  $stmt = $dbh->query($sql);
  $result = $stmt->setFetchMode(PDO::FETCH_NUM);
  while ($row = $stmt->fetch()) {
    print $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
  }
}
catch (PDOException $e) {
  print $e->getMessage();
}

===================================================
mysql-pdo 예제 2
https://cnpnote.tistory.com/entry/mysqli-%EB%98%90%EB%8A%94-PDO-%EC%9E%A5%EB%8B%A8%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9E%85%EB%8B%88%EA%B9%8C-%EB%8B%AB%EC%9D%80
===================================================
class Student {
    public $id;
    public $first_name;
    public $last_name

    public function getFullName() {
        return $this->first_name.' '.$this->last_name
    }
}

try
{
    $dbh = new PDO("mysql:host=$hostname;dbname=school", $username, $password)
    $stmt = $dbh->query("SELECT * FROM students");

    /* MAGIC HAPPENS HERE */
    $stmt->setFetchMode(PDO::FETCH_INTO, new Student);

    foreach($stmt as $student)
    {
        echo $student->getFullName().'<br />';
    }
    $dbh = null;
}
catch(PDOException $e)
{
    echo $e->getMessage();
}


----------------------------------
class Test
{
    protected $cols;

    function __set($name, $value) {
        $this->cols[$name] = $value;
    }

    function __get($name) {
        return $this->cols[$name];
    }
}

$obj = new Test();
$db = PDOTest::factory();
$stmt = $db->prepare("select * from test");
$stmt->setFetchMode(PDO::FETCH_INTO, $obj);
$stmt->execute();

foreach ($stmt as $a) {
    print_r($a);
}

print_r($obj); // contains the same values as the last iteration above

------------------------------
$db = new PDO($dsn, "testuser", "testuser");
$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)

$keyword = "%테스트%";
$no = 1;
$query = "SELECT num, name FROM tb_test WHERE name LIKE ? AND num > ?";

$stmt = $db->prepare($query);
$stmt->execute(array($keyword, $no));
$result = $stmt->fetchAll(PDO:FETCH_NUM);

for($i=0; $i<count($result); $i++){
    printf("%s : %s <br/>", $result[$i][0], $result[$i][1]);
}



===================================================
//[PHP] PDO::setAttribute 정리
https://offbyone.tistory.com/1
https://www.php.net/manual/en/book.pdo.php
https://kor-karll.github.io/php/2018/02/10/PHP-PDO-setAttribute/
===================================================



===================================================
PDOStatement :: setFetchMode —이 문장에 대한 기본 페치 모드를 설정
https://phpdelusions.net/pdo/fetch_modes
https://www.php.net/manual/en/pdostatement.setfetchmode.php
https://www.php.net/manual/en/class.pdostatement.php
===================================================
PDO Fetch Modes
Classic Modes
PDO::FETCH_BOTH
PDO::FETCH_NUM
PDO::FETCH_ASSOC
PDO::FETCH_OBJ
PDO::FETCH_LAZY
Most useful modes
PDO::FETCH_COLUMN
PDO::FETCH_KEY_PAIR
PDO::FETCH_UNIQUE
PDO::FETCH_GROUP
OOP
PDO::FETCH_CLASS
PDO::FETCH_PROPS_LATE
PDO::FETCH_CLASSTYPE
PDO::FETCH_INTO
PDO::FETCH_SERIALIZE
Miscellaneous
PDO::FETCH_FUNC
PDO::FETCH_NAMED
PDO::FETCH_BOUND
PDO::FETCH_ORI_NEXT at al


---------------------------------------------------------------
PDO :: FETCH_BOTH

mysql_fetch_array()의 대응 자입니다.
행은 배열 형식으로 리턴되며,
여기서 데이터가 복제되어 숫자 및 연관 색인을 통해 액세스됩니다.
이 모드는 기본적으로 설정되어 있습니다.

 $user = $pdo->query("SELECT * from users LIMIT 1")->fetch(PDO::FETCH_BOTH);
/*
array (
  'id' => '104',  0 => '104',
  'name' => 'John',  1 => 'John',
  'sex' => 'male',  2 => 'male',
  'car' => 'Toyota',  3 => 'Toyota',
)*/

---------------------------------------------------------------
PDO :: FETCH_NUM

mysql_fetch_row() 예전 친구,상대방, 숫자 인덱스 만 :

 $user = $pdo->query("SELECT * from users LIMIT 1")->fetch(PDO::FETCH_NUM);
/*
array (
  0 => '104',
  1 => 'John',
  2 => 'male',
  3 => 'Toyota',
)*/

---------------------------------------------------------------
PDO :: FETCH_ASSOC

똑같은 것이지만 mysql_fetch_assoc()-연관 지수에만 해당됩니다. PDO :: FETCH_NAMED 참조

 $user = $pdo->query("SELECT * from users LIMIT 1")->fetch(PDO::FETCH_ASSOC);

/*
array (
  'id' => '104',
  'name' => 'John',
  'sex' => 'male',
  'car' => 'Toyota',
)*/

---------------------------------------------------------------
PDO :: FETCH_OBJ

같은 mysql_fetch_object()클래스 이름이 제공되지 않습니다.
클래스 이름이 제공되지 않았습니다.
stdClass인스턴스를 반환 합니다.

 $user = $pdo->query("SELECT * from users LIMIT 1")->fetch(PDO::FETCH_OBJ);
/*
stdClass::__set_state(array(
   'id' => '104',
   'name' => 'John',
   'sex' => 'male',
   'car' => 'Toyota',
))*/

---------------------------------------------------------------
PDO :: FETCH_LAZY
이 상수는 너무 놀랍기 때문에 전체 섹션을 사용하기로 결정했습니다. 우선, 반환 값은 특수 클래스의 인스턴스 PDORow이며이 객체에는 많은 독특한 기능이 있습니다.

먼저이 변수 에는 행 데이터가 포함되어 있지 않지만 필요에 따라 반환하면됩니다 (따라서 이름이 암시합니다)
대신, queryStringSQL 쿼리가 할당 된 하나의 신비한 변수가 포함되어 있습니다 . ( PDOStatement 클래스를 상기시켜주는 ) :

 $lazy = $pdo->query("SELECT name FROM users")->fetch(PDO::FETCH_LAZY);
/*
object(PDORow)#3 (2) {
  ["queryString"] => string(22) "SELECT name FROM users"
  ["name"]        => string(4) "John"
}*/
호기심을 위해-예, 덮어 쓸 수 있습니다 :)

셋째,이 개체를 세션에 저장할 수 없습니다 (즉,이 개체는 직렬화 할 수 없습니다)
넷째, 숫자 색인, 연관 색인 또는 오브젝트 특성을 사용하여 데이터를 가져올 수 있습니다.
다섯째, 정의되지 않은 인덱스 / 프로퍼티를 호출 해도 "정의되지 않은 속성 / 인덱스"오류가 발생 하지 않습니다 . NULL값이 자동으로 반환됩니다.
여섯째,이 변수는 결과 fetch()호출 후 상태를 변경 합니다.
일곱째,이 상수는와 함께 사용할 수 없지만와 함께 fetchAll()만 사용할 수 있습니다 fetch()


 $stmt = $pdo->query("SELECT *, REPEAT(' ', 1024 * 1024) big FROM users");
echo 'start       ', round(memory_get_usage() / 1024), PHP_EOL;
$lazy = $stmt->fetch(PDO::FETCH_LAZY);
echo 'lazy fetch  ', round(memory_get_usage() / 1024), PHP_EOL;
$big  = $lazy[3];
echo 'lazy assign ', round(memory_get_usage() / 1024), PHP_EOL;
echo 'lazy name   ', $lazy[0], PHP_EOL;
echo 'lazy undef  ', var_dump($lazy['undef']);

echo '------------', PHP_EOL;

$num = $stmt->fetch(PDO::FETCH_NUM);
echo 'num fetch   ', round(memory_get_usage() / 1024), PHP_EOL;
$big2 = $num[3];
echo 'num assign  ', round(memory_get_usage() / 1024), PHP_EOL;
$big2 .= ''; // to invoke a copy-on-write
echo 'num assign2 ', round(memory_get_usage() / 1024), PHP_EOL;
echo 'lazy name   ', $lazy[0], PHP_EOL;
echo 'num undef  ', var_dump($num['undef']);



산출:

 start       228
lazy fetch  228
lazy assign 1252
lazy name   John
lazy undef  NULL
------------
num fetch   2277
num assign  2277
num assign2 3301
lazy name   Mike
num undef
Notice:  Undefined index: undef in pdo.php on line 48
NULL
보시다시피이 코드는 users 테이블에서 모든 레코드를 가져오고 1Mb 크기의 열 하나를 추가합니다. 첫 번째 페치는 완료되었으며 PDO::FETCH_LAZY소비 된 메모리 양을 변경하지 않는 것을 볼 수 있습니다 (이 동작은 사용되는 버퍼링 모드 에 따라 달라질 수 있음 ). 그 후 우리는 기존의 방법 중 하나를 사용하고 즉시 메모리 소비가 증가하는 것을 보면서 다른 행을 가져옵니다. 따라서 메모리 저장이 분명합니다. 또한 "정의되지 않은 변수"오류 부재와 결과 fetch()호출 후 상태 변경이 관찰되었습니다 .

이것으로부터 우리는 PDORow객체가 단지 결과 집합에 대한 링크 라고 결론 내릴 수 있습니다 . 자체 상태가 없으면 현재 커서 위치에서 데이터를 읽는 것입니다. 이 모든 것을 감안할 때이 모드가 거의 사용되지 않는 것은 놀라운 일입니다.

가장 유용한 모드
여기에 가장 유용한 형식을 나열하여 가장 필요한 형식으로 데이터를 반환하기로 결정했습니다.
이 모든 모드는로만 의미가 fetchAll()있습니다.

결과 형식을 변경하기 위해 항상 여러 페치 모드를 결합 할 수 있습니다. 아래의 모든 예제 PDO::FETCH_ASSOC는 기본 페치 형식으로 설정되어 제공 됩니다.
---------------------------------------------------------------
PDO :: FETCH_COLUMN

많은 행 중 하나의 열만 페치되는 경우 쿼리에서 일반 1 차원 배열을 얻는 것이 매우 편리합니다. 여기 있습니다 :

 $data = $pdo->query('SELECT name FROM users')->fetchAll(PDO::FETCH_COLUMN);

/* array (
  0 => 'John',
  1 => 'Mike',
  2 => 'Mary',
  3 => 'Kathy',
) */

---------------------------------------------------------------
PDO :: FETCH_KEY_PAIR

위와 동일한 열을 가져와야 하지만 숫자 순이 아닌 고유 필드로 색인을 생성 해야하는 경우에도 매우 유용한 형식 입니다.

 $data = $pdo->query('SELECT name, car FROM users')->fetchAll(PDO::FETCH_KEY_PAIR);

/* array (
  'John' => 'Toyota',
  'Mike' => 'Ford',
  'Mary' => 'Mazda',
  'Kathy' => 'Mazda',
)

 $data = $pdo->query('SELECT sex, count(*) FROM users GROUP BY sex')->fetchAll(PDO::FETCH_KEY_PAIR);

/* array (
  'male' => 2,
  'female' => 2,
)
이 모드에 대해 두 개의 열만 선택해야하며, 첫 번째 열은 고유해야합니다.
---------------------------------------------------------------
PDO :: FETCH_UNIQUE

위와 동일하지만 하나의 열이 아닌 전체 행을 가져 오지만 고유 필드로 색인화 됨

 $data = $pdo->query('SELECT * FROM users')->fetchAll(PDO::FETCH_UNIQUE);
/* array (
  104 => array (
    'name' => 'John',
    'car' => 'Toyota',
  ),
  110 => array (
    'name' => 'Mike',
    'car' => 'Ford',
  ),
  120 => array (
    'name' => 'Mary',
    'car' => 'Mazda',
  ),
  121 => array (
    'name' => 'Kathy',
    'car' => 'Mazda',
  ),
)*/

여기에서 id로 인덱스 된 데이터 배열을 얻습니다
(선택한 첫 번째 열은 고유해야합니다.
이 쿼리에서는 첫 번째 열이 id라고 가정하지만 명시 적으로 더 잘 나열해야합니다).
또는 다른 고유 필드도 사용할 수 있습니다.

$data = $pdo->query('SELECT name, users.* FROM users')->fetchAll(PDO::FETCH_UNIQUE);

/* array (
  'John' => array (
    'sex' => 'male',
    'car' => 'Toyota',
  ),
  'Mike' => array (
    'sex' => 'male',
    'car' => 'Ford',
  ),
  'Mary' => array (
    'sex' => 'female',
    'car' => 'Mazda',
  ),
  'Kathy' => array (
    'sex' => 'female',
    'car' => 'Mazda',
  ),
) */
---------------------------------------------------------------
PDO :: FETCH_GROUP

이 모드는 반환 된 행을 중첩 된 배열로 그룹화합니다.
여기서 인덱스는 첫 번째 열의 고유 한 값이되고 값은 regular에서 반환 된 것과 유사한 배열 fetchAll()입니다.
예를 들어 다음 코드는 소년을 소녀와 분리하여 다른 배열에 넣습니다.

 $data = $pdo->query('SELECT sex, name, car FROM users')->fetchAll(PDO::FETCH_GROUP);

/* array (
  'male' => array (
        0 => array (
          'name' => 'John',
          'car' => 'Toyota',
        ),
        1 => array (
          'name' => 'Mike',
          'car' => 'Ford',
        ),
  ),
  'female' => array (
    0 => array (
      'name' => 'Mary',
      'car' => 'Mazda',
    ),
    1 => array (
      'name' => 'Kathy',
      'car' => 'Mazda',
    ),
  ),
) */
따라서 "날짜 별 그룹 이벤트"또는 "카테고리 별 그룹 제품"과 같은 인기있는 수요에 이상적인 솔루션입니다.

이 모드는 다음과 결합 될 수 있습니다 PDO::FETCH_COLUMN.
$sql = "SELECT sex, name FROM users";
$data = $pdo->query($sql)->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_COLUMN);
/*
array (
  'male' =>array (
    0 => 'John',
    1 => 'Mike',
  ),
  'female' =>array (
    0 => 'Mary',
    1 => 'Kathy',
  ),
)*/
힌트 : 모든 필드를 선택해야하지만 첫 번째 필드가 아닌 그룹을 그룹화 해야하는 경우 첫 번째 생각으로 분류되지 않습니다.

 SELECT sex, * FROM users
오류를 반환합니다. 이를 피하려면 표 이름에 별표를 붙이십시오.

 SELECT sex, users.* FROM users
지금은 매력처럼 작동합니다!

---------------------------------------------------------------
OOP
물론 PDO의 개체 조작 기능은 바보 같은 stdObject인스턴스 를 반환하는 것으로 제한되지 않습니다 .

다음 섹션에서는 객체 지향 페치 모드에 대해 배웁니다.


PDO :: FETCH_CLASS
PDO에서 객체 조작의 초석.
주어진 이름으로 클래스의 인스턴스를 작성하고 리턴 된 열을 클래스의 특성에 맵핑합니다.
이 모드는 데이터베이스에서 단일 행 또는 행 배열을 가져 오는 데 사용할 수 있습니다.
이 fetchAll()접근 방식은 매우 친숙합니다.

 class User {};
$users = $pdo->query('SELECT name FROM users')->fetchAll(PDO::FETCH_CLASS, 'User');
반환 된 데이터로 채워진 속성을 가진 User 클래스의 객체로 구성된 배열을 제공합니다.

 array(2) {
  [0]=> object(User)#3 (1) {
    ["name"] => string(4) "John"
  }
  [1]=> object(User)#4 (1) {
    ["name"]=> string(4) "Mike"
  }
}


단일 행을 얻는 동안 두 가지 옵션이 있습니다.
그러나 fetch()다음과 같이 익숙한 방법을 사용할 수 있습니다 .

 class User {};
$stmt = $pdo->query('SELECT name FROM users LIMIT 1');
$stmt->setFetchMode(PDO::FETCH_CLASS, 'User');
$user = $stmt->fetch();

전용 fetchObject()방법 을 사용하는 것이 좋습니다 .
 class User {};
$user = $pdo->query('SELECT name FROM users LIMIT 1')->fetchObject('User');



fetch()객체를 얻는 데 사용 하는 데 몇 가지 문제가 있으므로

생성자 매개 변수를 새로 만든 객체에 전달할 수 없습니다
그러한 이름으로 정의 된 클래스가 없으면 배열 이 자동으로 반환되고 fetchObject()오류가 발생합니다.
분명히, 전용 메소드는 작성하는 데 더 적은 코드가 필요합니다.
어떤 방법을 선택하든 반환 된 모든 열은 다음 규칙에 따라 해당 클래스의 속성에 할당됩니다.

이름이 열 이름과 같은 클래스 속성이 있으면 열 값이이 속성에 할당됩니다.
그러한 속성이 없으면 마법 __set()메서드가 호출됩니다.
__set()클래스에 대해 메소드가 정의되지 않은 경우 공용 특성이 작성되고 여기에 열 값이 지정됩니다.

예를 들어,이 코드

 class User
{
    public $name;
}
$user = $pdo->query('SELECT * FROM users LIMIT 1')->fetchObject('User');

클래스의 ixist 여부에 관계없이 모든 속성이 자동으로 지정된 객체를 제공합니다.

 object(User)#3 (4) {
  ["id"]   => string(3) "104"
  ["name"] => string(4) "John"
  ["sex"]  => string(4) "male"
  ["car"]  => string(6) "Toyota"
}


이를 통해 자동 속성 생성을 피하기 위해 매직 __set()메서드를 사용 하여 속성을 필터링 해야한다는 것을 알 수 있습니다 .
가장 간단한 필터링 기술은 __set()객체에 빈 메소드를 추가하는 것 입니다.
이를 통해 기존 속성 만 설정됩니다.

 class User
{
    private $name;
    public function __set($name, $value) {}
}
$user = $pdo->query('SELECT * FROM users LIMIT 1')->fetchObject('User');

array(1) {
  [0]=> object(User)#3 (1) {
    ["name":"User":private]=> string(4) "John"
  }
}
보시다시피이 모드에서 PDO는 개인 속성에도 값을 할당 할 수 있습니다. 조금 예상치 못했지만 매우 유용합니다.

물론 새로 생성 된 클래스의 경우 생성자 매개 변수를 제공 할 수 있습니다.


위의 예에 추가해 보겠습니다.
class User {
    public function __construct($car) {
        $this->car = $car;
    }
}
$users = $pdo->query('SELECT name FROM users LIMIT 1')
            ->fetchAll(PDO::FETCH_CLASS, 'User', ['Caterpillar']);

// or using fetch()
$stmt = $pdo->query('SELECT name FROM users LIMIT 1');
$stmt->setFetchMode(PDO::FETCH_CLASS, 'User', ['Caterpillar']);
$user = $stmt->fetch();

/*
object(User)#3 (2) {
    ["name"] => string(4) "John"
    ["car"]  => string(11) "Caterpillar"
} */
보다시피,이 모드에서 PDO 는 생성자 를 호출 하기 전에 클래스 속성을 할당합니다 .



이 동작을 수정하려면 다음 플래그를 사용하십시오.

PDO :: FETCH_PROPS_LATE
페치 모드가 아니라 수정 자 플래그입니다.
위에서 언급했듯이 PDO는 기본적으로 생성자를 호출하기 전에 클래스 속성을 할당합니다.
이 동작은 다음 플래그를 사용하여 변경할 수 있습니다.

 class User {
    public function __construct($car) {
        $this->car = $car;
    }
}
$stmt = $pdo->query('SELECT name, car FROM users LIMIT 1');
$stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User', ['Caterpillar']);
$user = $stmt->fetch();
/*
object(User)#3 (2) {
  ["car"]  => string(6) "Toyota"
  ["name"] => string(4) "John"
} */
보시다시피 생성자에 할당 된 값을 덮어 썼습니다.



PDO :: FETCH_CLASSTYPE

PDO에 첫 번째 열 값에서 클래스 이름을 가져 오도록 지시하는 수정 자 플래그가 하나 더 있습니다.
이 플래그를 사용하면 setFetchMode() 와 fetch() 사용을 피할 수 있습니다.

 $data = $pdo->query("SELECT 'User', name FROM users")
            ->fetch(PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE);
/ *
object(User)#3 (1) {
  ["name"]=> string(4) "John"
} */

또한 주요 기사 에 대한 주석에서 언급 한 것처럼 이 모드는 동일한 쿼리에서 다른 클래스의 객체를 만들 수있는 경우 유용 할 수 있습니다.

$stmt = $pdo->query('SELECT sex, name FROM users');
$users = $stmt->fetchAll(PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE);
/*
array(6) {
  [0]=> object(Male)#3 (1) {
    ["name"]=> string(4) "John"
  }
  [1]=> object(Male)#4 (1) {
    ["name"]=> string(4) "Mike"
  }
  [2]=> object(Female)#5 (1) {
    ["name"]=> string(4) "Mary"
  }
  [3]=> object(Female)#6 (1) {
    ["name"]=> string(5) "Kathy"
  }
}*/



PDO :: FETCH_INTO

와 달리 PDO::FETCH_CLASS새 객체를 만들지 않고 기존 객체를 업데이트합니다.
setFetchMode()기존 변수를 매개 변수로 사용하는 경우에만 작동 합니다. 분명히 쓸모없는 fetchAll().

 class User
{
    public $name;
    public $state;

    public function __construct()
    {
        $this->name = NULL;
    }
}
$user = new User;
$user->state = "up'n'running";
var_dump($user);
/*
object(Foo)#2 (2) {
  ["name"]  => NULL
  ["state"] => string(12) "up'n'running"
}*/

$stmt = $pdo->query('SELECT name FROM users LIMIT 1');
$stmt->setFetchMode(PDO::FETCH_INTO, $user);
$data = $stmt->fetch();
var_dump($data, $user);
/*
object(Foo)#2 (2) {
  ["name"]  => string(4) "John"
  ["state"] => string(12) "up'n'running"
}
object(Foo)#2 (2) {
  ["name"]  => string(4) "John"
  ["state"] => string(12) "up'n'running"
} */
보시다시피, fetch()call은 동일한 객체를 반환합니다.
또한 PDO::FETCH_CLASS이 모드 는와 달리 개인 속성을 할당하지 않습니다.



PDO :: FETCH_SERIALIZE

에 대한 플래그가 하나 더 PDO::FETCH_CLASS있습니다.
의심 할 여지없이 데이터베이스에 직렬화되어 저장된 객체를 반환해야합니다. 현재 작동하지 않습니다.

같은 일을하려고

 class foo {}
$foo = new foo;
$foo->status="up'n'running";
$sFoo = serialize($foo);

// storing $sFoo in a database
// and then something like
$stmt = $pdo->query('SELECT sFoo FROM table');
$stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_SERIALIZE, 'foo');
$foo = $stmt->fetch();

그러나 데이터베이스에서 리턴 된 오브젝트는 직렬화 이전 과 동일하지 않습니다 !
따라서 직렬화 해제가 실패합니다.
친구와 함께이 모드를 둘러 본 후 버그를 제출 했지만 그 이후에는 아무것도 바뀌지 않은 것 같습니다.

어느 쪽이든,이 플래그는 항상 수동으로 직렬화를 해제 할 수 있기 때문에 다소 쓸모가 없습니다.

class User {
    protected $name = "John";
}
$serialized = serialize(new User);
var_dump($serialized);

$stmt = $pdo->prepare('INSERT INTO sertest VALUES(?)')->execute([$serialized]);
$user = unserialize($pdo->query('SELECT * FROM sertest')->fetchColumn());
var_dump($user);

/*
string(40) "O:4:"User":1:{s:7:"*name";s:4:"John";}"
object(User)#2 (1) {
  ["name":protected]=>string(4) "John"
} */



Miscellaneous

PDO :: FETCH_FUNC
폐쇄 애호가를 위해. 작동 fetchAll()합니다.
반환 된 모든 열에 대한 매개 변수를 수동으로 나열해야하므로 매우 편리하지 않습니다.

예를 들어 PDO::FETCH_COLUMN에뮬레이터는 다음과 같습니다.

 $data = $pdo
    ->query('SELECT name FROM users')
    ->fetchAll(PDO::FETCH_FUNC, function($first) {return $first;});


PDO :: FETCH_NAMED

와 거의 동일 PDO::FETCH_ASSOC하지만 약간의 차이가 있습니다.
여러 번 같은 질문으로 반환 된 동일한 이름으로 다른 필드를 구별 할 수 있는지에 대한 질문을 보았습니다.
유일한 대답은 SQL 대신 별칭이나 숫자 인덱스를 사용하는 것입니다.
그러나 PDO는 다른 방법을 제공합니다.
이 모드를 사용하는 경우, 반환 값은와 같은 방식으로 할당 PDO::FETCH_ASSOC되지만 결과 집합에 이름이 같은 열이 여러 개 있으면 모든 값이 중첩 된 배열에 저장됩니다 .
예를 들어 usersand companies에서 선택 하고 두 테이블에 모두 column이 name있습니다.

PDO::FETCH_ASSOC를 사용하면 다음 이름 중 하나를 잃게됩니다.

 $data = $pdo->query("SELECT * FROM users, companies WHERE users.name=username")->fetch();
/*
array(3) {
  ["name"]     => string(10) "ACME, Inc."
  ["sex"]      => string(4) "male"
  ["username"] => string(4) "John"
}*/

PDO::FETCH_NAMED대신 if 를 사용하면 모든 것이 그대로 유지됩니다.

 $data = $pdo->query("SELECT * FROM users, companies WHERE users.name=username")->fetch(PDO::FETCH_NAMED);
/*
array(3) {
  ["name"]=> array(2) {
    [0]=> string(4) "John"
    [1]=> string(10) "ACME, Inc."
  }
  ["sex"]      => string(4) "male"
  ["username"] => string(4) "John"
}
이 기능이 전혀 유용한 지 의심 스럽지만 적어도 선택의 여지가 있습니다.


PDO :: FETCH_BOUND
본질적으로 다른 모드와는 다른 흥미로운 모드.
자체적으로 데이터를 반환하지 않지만 PDO는 이전에 사용하여 바인딩 된 변수에 값을 할당합니다
bindColumn()-mysqli 사용자에게 친숙한 동작.
그리고 예제는 매뉴얼 페이지에서 볼 수 있습니다

---------------------------------------------------------------
al에서 PDO :: FETCH_ORI_NEXT
http://php.net/manual/en/pdostatement.fetch.php#example-1053

(유일한 적절한) PDO 튜토리얼
- https://phpdelusions.net/pdo

간단하면서도 효율적인 PDO 래퍼
- https://phpdelusions.net/pdo/pdo_wrapper

PDO와 비교 한 mysqli의 사용성 문제
- https://phpdelusions.net/pdo/mysqli_comparison

준비된 명령문이 도움이되지 않는 SQL 삽입
- https://phpdelusions.net/pdo/sql_injection_example

최초의 데이터베이스 래퍼 유년기 질병
- https://phpdelusions.net/pdo/common_mistakes

PDO로 객체를 가져 오기
- https://phpdelusions.net/pdo/objects

MCVE 또는 PDO와의 데이터베이스 상호 작용을 디버그하는 방법
- https://phpdelusions.net/pdo/mcve

PDO 및 password_verify ()를 사용하여 사용자 인증
- https://phpdelusions.net/pdo/cargo_cult_prepared_statement

화물 컬트 준비 진술
- https://phpdelusions.net/pdo/cargo_cult_prepared_statement

허용 목록 도우미 기능
- https://phpdelusions.net/pdo/whitelisting_helper_function





===================================================
mysql-pdo 예제 3
===================================================

public function seleccionar(Utilizador $utilizador) {

try {

$stmt = $this->_dbh->prepare("SELECT * FROM UTILIZADOR WHERE ID_UTILIZADOR=?");

$stmt->bindParam(1, $_SESSION['id_utilizador'], PDO::PARAM_INT);

$stmt->execute();

$rows = $stmt->fetchAll(PDO::FETCH_OBJ);

return $rows;

 } catch (PDOException $ex) {

echo "Erro: " . $ex->getMessage();
 }
}



$row = $utilizadordao->seleccionar($utilizador);
$user=$row[0]->USERNAME_UTILIZADOR;
$pass=$row[0]->PASSWORD_UTILIZADOR;
---------------------------------------------------------------





---------------------------------------------------------------





---------------------------------------------------------------





---------------------------------------------------------------





---------------------------------------------------------------





---------------------------------------------------------------





---------------------------------------------------------------







===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------

===================================================

===================================================



---------------------------------------------------------------
===================================================

===================================================




===================================================

===================================================



===================================================

===================================================




===================================================

===================================================



---------------------------------------------------------------